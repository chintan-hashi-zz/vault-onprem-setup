#!/bin/bash
# This script is used to configure and run Vault on a server.

set -e

readonly VAULT_CONFIG_FILE="default.hcl"
readonly VAULT_PID_FILE="vault-pid"
readonly VAULT_TOKEN_FILE="vault-token"
readonly SYSTEMD_CONFIG_PATH="/etc/systemd/system/vault.service"
readonly RAFT_LOCATION_PATH="/raft/data"

readonly DEFAULT_PORT=8200
readonly DEFAULT_LOG_LEVEL="info"

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly SCRIPT_NAME="$(basename "$0")"

function print_usage {
  echo
  echo "Usage: run-vault [OPTIONS]"
  echo
  echo "This script is used to configure and run Vault on an AWS server."
  echo
  echo "Options:"
  echo
  echo -e "  --tls-cert-file\tSpecifies the path to the certificate for TLS. Required. To use a CA certificate, concatenate the primary certificate and the CA certificate together."
  echo -e "  --tls-key-file\tSpecifies the path to the private key for the certificate. Required."
  echo -e "  --port\t\tThe port for Vault to listen on. Optional. Default is $DEFAULT_PORT."
  echo -e "  --cluster-port\tThe port for Vault to listen on for server-to-server requests. Optional. Default is --port + 1."
  echo -e "  --api-addr\t\tThe full address to use for Client Redirection when running Vault in HA mode. Defaults to \"https://[instance_ip]:$DEFAULT_PORT\". Optional."
  echo -e "  --config-dir\t\tThe path to the Vault config folder. Optional. Default is the absolute path of '../config', relative to this script."
  echo -e "  --bin-dir\t\tThe path to the folder with Vault binary. Optional. Default is the absolute path of the parent folder of this script."
  echo -e "  --data-dir\t\tThe path to the Vault data folder. Optional. Default is the absolute path of '../data', relative to this script."
  echo -e "  --log-level\t\tThe log verbosity to use with Vault. Optional. Default is $DEFAULT_LOG_LEVEL."
  echo -e "  --systemd-stdout\t\tThe StandardOutput option of the systemd unit.  Optional.  If not configured, uses systemd's default (journal)."
  echo -e "  --systemd-stderr\t\tThe StandardError option of the systemd unit.  Optional.  If not configured, uses systemd's default (inherit)."
  echo -e "  --user\t\tThe user to run Vault as. Optional. Default is to use the owner of --config-dir."
  echo -e "  --vault-node-id\t\tThe node ID for raft storage. Required"
  echo -e "  --skip-vault-config\tIf this flag is set, don't generate a Vault configuration file. Optional. Default is false."
  echo
  echo "Examples:"
  echo
  echo "  run-vault --tls-cert-file /opt/vault/tls/vault.crt.pem --tls-key-file /opt/vault/tls/vault.key.pem --vault-node-id vault-node-1"
}

function log {
  local -r level="$1"
  local -r message="$2"
  local -r timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  >&2 echo -e "${timestamp} [${level}] [$SCRIPT_NAME] ${message}"
}

function log_info {
  local -r message="$1"
  log "INFO" "$message"
}

function log_warn {
  local -r message="$1"
  log "WARN" "$message"
}

function log_error {
  local -r message="$1"
  log "ERROR" "$message"
}

# Based on code from: http://stackoverflow.com/a/16623897/483528
function strip_prefix {
  local -r str="$1"
  local -r prefix="$2"
  echo "${str#$prefix}"
}

function assert_not_empty {
  local -r arg_name="$1"
  local -r arg_value="$2"

  if [[ -z "$arg_value" ]]; then
    log_error "The value for '$arg_name' cannot be empty"
    print_usage
    exit 1
  fi
}


function get_instance_ip_address {
  hostname -I
}

function assert_is_installed {
  local -r name="$1"

  if [[ ! $(command -v ${name}) ]]; then
    log_error "The binary '$name' is required by this script but is not installed or in the system's PATH."
    exit 1
  fi
}

function get_vault_version {
  #Runs vault -v to get the vault version, then strips out everything but the version number.
  #The current output format of vault -v is:
  #Vault v0.10.4 ('e21712a687889de1125e0a12a980420b1a4f72d3')
  /usr/local/bin/vault -v|awk '{print $2}'|tr -d v
}

function vault_version_at_least {
  local -r config_path=$1
  local -r ui_config=$2
  VAULT_VERSION=$(get_vault_version)

  #This if statement will echo the current vault version and the minimum version required for ui support.
  #It then strips out the comments, sorts the two values, and chooses the top (least) one.
  if [[ $(echo "$VAULT_VERSION 0.10.0" | tr " " "\n" |sort --version-sort| head -n 1) = 0.10.0 ]]
    then
      echo -e "$ui_config" >> "$config_path"
    else
      log_info "Vault 0.10.0 or greater is required for UI support."
  fi
}


function generate_vault_config {
  local -r tls_cert_file="$1"
  local -r tls_key_file="$2"
  local -r port="$3"
  local -r cluster_port="$4"
  local -r api_addr="$5"
  local -r config_dir="$6"
  local -r user="$7"
  local -r vault_node_id="$8"
  local -r config_path="$config_dir/$VAULT_CONFIG_FILE"

  local instance_ip_address
  instance_ip_address=$(get_instance_ip_address)

  log_info "Creating default Vault config file in $config_path"
  local -r ui_config=$(cat <<EOF
ui = true

EOF
)

  local -r listener_config=$(cat <<EOF
listener "tcp" {
  address         = "0.0.0.0:$port"
  cluster_address = "0.0.0.0:$cluster_port"
  tls_cert_file   = "$tls_cert_file"
  tls_key_file    = "$tls_key_file"
}\n
EOF
)

  local storage_type="storage"

  local vault_storage_backend=""

  vault_storage_backend=$(cat <<EOF
$storage_type "raft" {
  path    = "/raft/data"
  node_id = "$vault_node_id"
}
# HA settings
cluster_addr  = "https://$instance_ip_address:$cluster_port"
api_addr      = "$api_addr"
EOF
)

  vault_version_at_least "$config_path" "$ui_config"

  echo -e "$listener_config" >> "$config_path"
  echo -e "$vault_storage_backend" >> "$config_path"
  chown "$user:$user" "$config_path"

#generating raft storage location

  mkdir -p $RAFT_LOCATION_PATH
  chown "$user:$user" "$RAFT_LOCATION_PATH"

}

function generate_systemd_config {
  local -r systemd_config_path="$1"
  local -r vault_config_dir="$2"
  local -r vault_bin_dir="$3"
  local -r vault_log_level="$4"
  local -r vault_systemd_stdout="$5"
  local -r vault_systemd_stderr="$6"
  local -r vault_user="$7"
  local -r config_path="$config_dir/$VAULT_CONFIG_FILE"

  local vault_description="HashiCorp Vault - A tool for managing secrets"
  local vault_command="server"
  local vault_config_file_or_dir="$vault_config_dir"  # Vault agent requires single file, but server can accept config dir.
  if [[ "$is_vault_agent" == "true" ]]; then
    vault_command="agent"
    vault_description="HashiCorp Vault Agent"
    vault_config_file_or_dir="$config_path"
  fi

  log_info "Creating systemd config file to run Vault in $systemd_config_path"

  local -r unit_config=$(cat <<EOF
[Unit]
Description=\"$vault_description\"
Documentation=https://www.vaultproject.io/docs/
Requires=network-online.target
After=network-online.target
ConditionFileNotEmpty=$config_path

EOF
)

  local -r service_config=$(cat <<EOF
[Service]
User=$vault_user
Group=$vault_user
ProtectSystem=full
ProtectHome=read-only
PrivateTmp=yes
PrivateDevices=yes
SecureBits=keep-caps
AmbientCapabilities=CAP_IPC_LOCK
Capabilities=CAP_IPC_LOCK+ep
CapabilityBoundingSet=CAP_SYSLOG CAP_IPC_LOCK
NoNewPrivileges=yes
ExecStart=$vault_bin_dir/vault $vault_command -config $vault_config_file_or_dir -log-level=$vault_log_level
ExecReload=/bin/kill --signal HUP \$MAINPID
KillMode=process
KillSignal=SIGINT
Restart=on-failure
RestartSec=5
TimeoutStopSec=30
StartLimitIntervalSec=60
StartLimitBurst=3
LimitNOFILE=65536
EOF
)

  local log_config=""
  if [[ ! -z $vault_systemd_stdout ]]; then
    log_config+="StandardOutput=$vault_systemd_stdout\n"
  fi
  if [[ ! -z $vault_systemd_stderr ]]; then
    log_config+="StandardError=$vault_systemd_stderr\n"
  fi

  local -r install_config=$(cat <<EOF
[Install]
WantedBy=multi-user.target
EOF
)

  echo -e "$unit_config" > "$systemd_config_path"
  echo -e "$service_config" >> "$systemd_config_path"
  echo -e "$log_config" >> "$systemd_config_path"
  echo -e "$install_config" >> "$systemd_config_path"
}

function start_vault {
  log_info "Reloading systemd config and starting Vault"
  sudo systemctl daemon-reload
  sudo systemctl enable vault.service
  sudo systemctl restart vault.service
}

# Based on: http://unix.stackexchange.com/a/7732/215969
function get_owner_of_path {
  local -r path="$1"
  ls -ld "$path" | awk '{print $3}'
}

function run {
  local tls_cert_file=""
  local tls_key_file=""
  local port="$DEFAULT_PORT"
  local cluster_port=""
  local api_addr=""
  local config_dir=""
  local bin_dir=""
  local data_dir=""
  local log_level="$DEFAULT_LOG_LEVEL"
  local systemd_stdout=""
  local systemd_stderr=""
  local user=""
  local skip_vault_config="false"
  local vault_node_id=""
  local all_args=()

  while [[ $# > 0 ]]; do
    local key="$1"

    case "$key" in
      --tls-cert-file)
        tls_cert_file="$2"
        shift
        ;;
      --tls-key-file)
        tls_key_file="$2"
        shift
        ;;
      --port)
        assert_not_empty "$key" "$2"
        port="$2"
        shift
        ;;
      --cluster-port)
        assert_not_empty "$key" "$2"
        cluster_port="$2"
        shift
        ;;
      --config-dir)
        assert_not_empty "$key" "$2"
        config_dir="$2"
        shift
        ;;
       --api-addr)
        assert_not_empty "$key" "$2"
        api_addr="$2"
        shift
        ;;
      --bin-dir)
        assert_not_empty "$key" "$2"
        bin_dir="$2"
        shift
        ;;
      --data-dir)
        assert_not_empty "$key" "$2"
        data_dir="$2"
        shift
        ;;
      --log-level)
        assert_not_empty "$key" "$2"
        log_level="$2"
        shift
        ;;
      --systemd-stdout)
        assert_not_empty "$key" "$2"
        systemd_stdout="$2"
        shift
        ;;
      --systemd-stderr)
        assert_not_empty "$key" "$2"
        systemd_stderr="$2"
        shift
        ;;
      --user)
        assert_not_empty "$key" "$2"
        user="$2"
        shift
        ;;
      --vault-node-id)
        assert_not_empty "$key" "$2"
        vault_node_id="$2"
        shift
        ;;
      --skip-vault-config)
        skip_vault_config="true"
        ;;
      --help)
        print_usage
        exit
        ;;
      *)
        log_error "Unrecognized argument: $key"
        print_usage
        exit 1
        ;;
    esac

    shift
  done

  # Required flags
  assert_not_empty "--tls-cert-file" "$tls_cert_file"
  assert_not_empty "--tls-key-file" "$tls_key_file"

  assert_is_installed "systemctl"
  assert_is_installed "curl"
  assert_is_installed "jq"

  if [[ -z "$config_dir" ]]; then
    config_dir=$(cd "$SCRIPT_DIR/../config" && pwd)
  fi

  # If $systemd_stdout and/or $systemd_stderr are empty, we leave them empty so that generate_systemd_config will use systemd's defaults (journal and inherit, respectively)

  if [[ -z "$bin_dir" ]]; then
    bin_dir=$(cd "$SCRIPT_DIR/../bin" && pwd)
  fi

  if [[ -z "$data_dir" ]]; then
    data_dir=$(cd "$SCRIPT_DIR/../data" && pwd)
  fi

  if [[ -z "$user" ]]; then
    user=$(get_owner_of_path "$config_dir")
  fi

  if [[ -z "$cluster_port" ]]; then
    cluster_port=$(( $port + 1 ))
  fi

  if [[ -z "$api_addr" ]]; then
    api_addr="https://$(get_instance_ip_address):${port}"
  fi

  if [[ "$skip_vault_config" == "true" ]]; then
    log_info "The --skip-vault-config flag is set, so will not generate a default Vault config file."
  else
      log_info "Running as Vault server"
      generate_vault_config \
        "$tls_cert_file" \
        "$tls_key_file" \
        "$port" \
        "$cluster_port" \
        "$api_addr" \
        "$config_dir" \
        "$user" \
        "$vault_node_id"
  fi

  generate_systemd_config "$SYSTEMD_CONFIG_PATH" "$config_dir" "$bin_dir" "$log_level" "$systemd_stdout" "$systemd_stderr" "$user"
  start_vault
}

run "$@"
